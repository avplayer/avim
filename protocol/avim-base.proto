
// 这个文件是 avim base 协议的 protobuf 定义. 使用 protoc 编译为对应的 C++ 代码
package avim.proto.base;

// 基础的AV地址, AVID 就是这个庞大的路由网络的地址标识
message avID{
	required string username = 1;
	required string domain = 2;
	optional string resource = 3; // 大部分情况下需要设置。不设置表示多播到客户登陆的所有客户端
	optional string useragent = 4; // 可选， 用户使用的客户端标识： 登陆的时候使用
}

// 基础包
message avimPacket{
	required avID src = 1; // 发送方地址
	repeated avID dest = 2; // 目的地地址
	required bool all_ofline = 4 [ default = false ]; // 控制是否允许服务器进行离线存储
	required string application = 3 [ default = "avim" ] ; // 表明上层软件是何种协议。
	enum messagetype {
	    option allow_alias = true;
	    MESSAGING =  0 ; // 消息， 服务器执行转发即可
	    MESSAGING_REPLAY = 1; // 应答，以便确认是否传递成功
	    CLIENTCONTROL =	 2; // 客户控制消息，see @avClientControl
	}
	required messagetype type = 5; // 消息类型

	// 下面是依据类型确定的消息

	optional avPacketMessage avmessage = 6; // messagetype = 0 的时候就是这个消息
	optional avPacketMessageReplay avmessage_reply = 7; // messagetype = 1 的时候就是这个消息

	optional avClientControl avctl = 256 ; //  客户控制消息 see @avClientControl

	

}




// 由和消息无关的控制消息，由服务器和服务之间传递，或则客户端和服务器之间的传递
// 客户端和客户端之间肯定是不使用这个消息块的
// 用于执行:
//	登陆， 认证， 客户发现，注册新客户，注销客户
message avClientControl{
	enum controltype {
		LOGIN = 0; // 登陆，digest 为空
		AUTH_REQUIRED = 1 ; // 如果服务器要求认证，就会返回这个， 要求认证， digest 包含 salt
		DIGEST_AUTH = 2 ; // 那么，就执行认证吧，发送这个消息进行认证, digest 包含的是 salt 后的密码
	}

	optional string digest = 50; // 客户端认证的时候发送的数据
}

message avPacketMessage{
	required	uint64 length = 1; // 消息长度
	optional 	bytes msgblock = 2; // 消息长度 > 0 的时候就有这个消息了
}

message avPacketMessageReplay{
    enum Status{
	option allow_alias = true;
	DELIVERED = 0;
	SUCCESS = 0 ; // 消息成功送达目的地
	FAILED = 1 ; // 消息送达失败
	SUCCESS_OFFLINED = 2; // 失败， 但已经被离线存储
	MULTIADDREDD_STATUS_ATTACHED = 3; // 对于多个目的地址的消息来说： 部分成功，具体成功失败看下面
    };
    required Status status = 1; // 消息的状态

    // 如果目的地址是多个的话，需要在这里检查每一个消息地址的成功失败状态
    message MultiStatus{
	required Status status = 1;
	required avID	avid = 2;
    }
    optional MultiStatus multistatus =2; // 
}

