// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avim-base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "avim-base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace avim {
namespace proto {
namespace base {

namespace {

const ::google::protobuf::Descriptor* avAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* avPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_avim_2dbase_2eproto() {
  protobuf_AddDesc_avim_2dbase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "avim-base.proto");
  GOOGLE_CHECK(file != NULL);
  avAddress_descriptor_ = file->message_type(0);
  static const int avAddress_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avAddress, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avAddress, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avAddress, resource_),
  };
  avAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avAddress_descriptor_,
      avAddress::default_instance_,
      avAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avAddress));
  avPacket_descriptor_ = file->message_type(1);
  static const int avPacket_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, figurprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, upperlayerpotocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, payload_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, message_sign_),
  };
  avPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avPacket_descriptor_,
      avPacket::default_instance_,
      avPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_avim_2dbase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avAddress_descriptor_, &avAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avPacket_descriptor_, &avPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_avim_2dbase_2eproto() {
  delete avAddress::default_instance_;
  delete avAddress_reflection_;
  delete avPacket::default_instance_;
  delete avPacket_reflection_;
  delete avPacket::_default_upperlayerpotocol_;
}

void protobuf_AddDesc_avim_2dbase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017avim-base.proto\022\017avim.proto.base\"\?\n\tav"
    "Address\022\020\n\010username\030\001 \002(\t\022\016\n\006domain\030\002 \002("
    "\t\022\020\n\010resource\030\003 \001(\t\"\337\001\n\010avPacket\022\014\n\004type"
    "\030\001 \002(\r\022\'\n\003src\030\002 \002(\0132\032.avim.proto.base.av"
    "Address\022\022\n\nfigurprint\030\003 \002(\014\022(\n\004dest\030\004 \002("
    "\0132\032.avim.proto.base.avAddress\022\037\n\021upperla"
    "yerpotocol\030\005 \002(\t:\004avim\022\026\n\016payload_length"
    "\030\006 \002(\004\022\017\n\007payload\030\007 \001(\014\022\024\n\014message_sign\030"
    "\010 \002(\014", 325);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "avim-base.proto", &protobuf_RegisterTypes);
  avAddress::default_instance_ = new avAddress();
  avPacket::_default_upperlayerpotocol_ =
      new ::std::string("avim", 4);
  avPacket::default_instance_ = new avPacket();
  avAddress::default_instance_->InitAsDefaultInstance();
  avPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_avim_2dbase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_avim_2dbase_2eproto {
  StaticDescriptorInitializer_avim_2dbase_2eproto() {
    protobuf_AddDesc_avim_2dbase_2eproto();
  }
} static_descriptor_initializer_avim_2dbase_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int avAddress::kUsernameFieldNumber;
const int avAddress::kDomainFieldNumber;
const int avAddress::kResourceFieldNumber;
#endif  // !_MSC_VER

avAddress::avAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void avAddress::InitAsDefaultInstance() {
}

avAddress::avAddress(const avAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void avAddress::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

avAddress::~avAddress() {
  SharedDtor();
}

void avAddress::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (this != default_instance_) {
  }
}

void avAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avAddress_descriptor_;
}

const avAddress& avAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avim_2dbase_2eproto();
  return *default_instance_;
}

avAddress* avAddress::default_instance_ = NULL;

avAddress* avAddress::New() const {
  return new avAddress;
}

void avAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_domain;
        break;
      }

      // required string domain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resource;
        break;
      }

      // optional string resource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void avAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required string domain = 2;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->domain(), output);
  }

  // optional string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->resource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* avAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string domain = 2;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  // optional string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int avAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string domain = 2;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string resource = 3;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avAddress::MergeFrom(const avAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avAddress::CopyFrom(const avAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void avAddress::Swap(avAddress* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(domain_, other->domain_);
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avAddress_descriptor_;
  metadata.reflection = avAddress_reflection_;
  return metadata;
}


// ===================================================================

::std::string* avPacket::_default_upperlayerpotocol_ = NULL;
#ifndef _MSC_VER
const int avPacket::kTypeFieldNumber;
const int avPacket::kSrcFieldNumber;
const int avPacket::kFigurprintFieldNumber;
const int avPacket::kDestFieldNumber;
const int avPacket::kUpperlayerpotocolFieldNumber;
const int avPacket::kPayloadLengthFieldNumber;
const int avPacket::kPayloadFieldNumber;
const int avPacket::kMessageSignFieldNumber;
#endif  // !_MSC_VER

avPacket::avPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void avPacket::InitAsDefaultInstance() {
  src_ = const_cast< ::avim::proto::base::avAddress*>(&::avim::proto::base::avAddress::default_instance());
  dest_ = const_cast< ::avim::proto::base::avAddress*>(&::avim::proto::base::avAddress::default_instance());
}

avPacket::avPacket(const avPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void avPacket::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  src_ = NULL;
  figurprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dest_ = NULL;
  upperlayerpotocol_ = const_cast< ::std::string*>(_default_upperlayerpotocol_);
  payload_length_ = GOOGLE_ULONGLONG(0);
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

avPacket::~avPacket() {
  SharedDtor();
}

void avPacket::SharedDtor() {
  if (figurprint_ != &::google::protobuf::internal::kEmptyString) {
    delete figurprint_;
  }
  if (upperlayerpotocol_ != _default_upperlayerpotocol_) {
    delete upperlayerpotocol_;
  }
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (message_sign_ != &::google::protobuf::internal::kEmptyString) {
    delete message_sign_;
  }
  if (this != default_instance_) {
    delete src_;
    delete dest_;
  }
}

void avPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avPacket_descriptor_;
}

const avPacket& avPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avim_2dbase_2eproto();
  return *default_instance_;
}

avPacket* avPacket::default_instance_ = NULL;

avPacket* avPacket::New() const {
  return new avPacket;
}

void avPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_src()) {
      if (src_ != NULL) src_->::avim::proto::base::avAddress::Clear();
    }
    if (has_figurprint()) {
      if (figurprint_ != &::google::protobuf::internal::kEmptyString) {
        figurprint_->clear();
      }
    }
    if (has_dest()) {
      if (dest_ != NULL) dest_->::avim::proto::base::avAddress::Clear();
    }
    if (has_upperlayerpotocol()) {
      if (upperlayerpotocol_ != _default_upperlayerpotocol_) {
        upperlayerpotocol_->assign(*_default_upperlayerpotocol_);
      }
    }
    payload_length_ = GOOGLE_ULONGLONG(0);
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
    if (has_message_sign()) {
      if (message_sign_ != &::google::protobuf::internal::kEmptyString) {
        message_sign_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_src;
        break;
      }

      // required .avim.proto.base.avAddress src = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_figurprint;
        break;
      }

      // required bytes figurprint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_figurprint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_figurprint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dest;
        break;
      }

      // required .avim.proto.base.avAddress dest = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_upperlayerpotocol;
        break;
      }

      // required string upperlayerpotocol = 5 [default = "avim"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upperlayerpotocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upperlayerpotocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->upperlayerpotocol().data(), this->upperlayerpotocol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_payload_length;
        break;
      }

      // required uint64 payload_length = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payload_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payload_length_)));
          set_has_payload_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_payload;
        break;
      }

      // optional bytes payload = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_message_sign;
        break;
      }

      // required bytes message_sign = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_sign()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void avPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required .avim.proto.base.avAddress src = 2;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->src(), output);
  }

  // required bytes figurprint = 3;
  if (has_figurprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->figurprint(), output);
  }

  // required .avim.proto.base.avAddress dest = 4;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dest(), output);
  }

  // required string upperlayerpotocol = 5 [default = "avim"];
  if (has_upperlayerpotocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->upperlayerpotocol().data(), this->upperlayerpotocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->upperlayerpotocol(), output);
  }

  // required uint64 payload_length = 6;
  if (has_payload_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->payload_length(), output);
  }

  // optional bytes payload = 7;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->payload(), output);
  }

  // required bytes message_sign = 8;
  if (has_message_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->message_sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* avPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required .avim.proto.base.avAddress src = 2;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->src(), target);
  }

  // required bytes figurprint = 3;
  if (has_figurprint()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->figurprint(), target);
  }

  // required .avim.proto.base.avAddress dest = 4;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dest(), target);
  }

  // required string upperlayerpotocol = 5 [default = "avim"];
  if (has_upperlayerpotocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->upperlayerpotocol().data(), this->upperlayerpotocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->upperlayerpotocol(), target);
  }

  // required uint64 payload_length = 6;
  if (has_payload_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->payload_length(), target);
  }

  // optional bytes payload = 7;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->payload(), target);
  }

  // required bytes message_sign = 8;
  if (has_message_sign()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->message_sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int avPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required .avim.proto.base.avAddress src = 2;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src());
    }

    // required bytes figurprint = 3;
    if (has_figurprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->figurprint());
    }

    // required .avim.proto.base.avAddress dest = 4;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest());
    }

    // required string upperlayerpotocol = 5 [default = "avim"];
    if (has_upperlayerpotocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upperlayerpotocol());
    }

    // required uint64 payload_length = 6;
    if (has_payload_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->payload_length());
    }

    // optional bytes payload = 7;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // required bytes message_sign = 8;
    if (has_message_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message_sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avPacket::MergeFrom(const avPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_src()) {
      mutable_src()->::avim::proto::base::avAddress::MergeFrom(from.src());
    }
    if (from.has_figurprint()) {
      set_figurprint(from.figurprint());
    }
    if (from.has_dest()) {
      mutable_dest()->::avim::proto::base::avAddress::MergeFrom(from.dest());
    }
    if (from.has_upperlayerpotocol()) {
      set_upperlayerpotocol(from.upperlayerpotocol());
    }
    if (from.has_payload_length()) {
      set_payload_length(from.payload_length());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_message_sign()) {
      set_message_sign(from.message_sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avPacket::CopyFrom(const avPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000bf) != 0x000000bf) return false;

  if (has_src()) {
    if (!this->src().IsInitialized()) return false;
  }
  if (has_dest()) {
    if (!this->dest().IsInitialized()) return false;
  }
  return true;
}

void avPacket::Swap(avPacket* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(src_, other->src_);
    std::swap(figurprint_, other->figurprint_);
    std::swap(dest_, other->dest_);
    std::swap(upperlayerpotocol_, other->upperlayerpotocol_);
    std::swap(payload_length_, other->payload_length_);
    std::swap(payload_, other->payload_);
    std::swap(message_sign_, other->message_sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avPacket_descriptor_;
  metadata.reflection = avPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace proto
}  // namespace avim

// @@protoc_insertion_point(global_scope)
