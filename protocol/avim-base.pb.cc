// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avim-base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "avim-base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace avim {
namespace proto {
namespace base {

namespace {

const ::google::protobuf::Descriptor* avID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avID_reflection_ = NULL;
const ::google::protobuf::Descriptor* avimPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avimPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* avClientControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avClientControl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* avClientControl_controltype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* avPacketMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avPacketMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* avPacketMessageReplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avPacketMessageReplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* avPacketMessageReplay_MultiStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avPacketMessageReplay_MultiStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* avPacketMessageReplay_Status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_avim_2dbase_2eproto() {
  protobuf_AddDesc_avim_2dbase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "avim-base.proto");
  GOOGLE_CHECK(file != NULL);
  avID_descriptor_ = file->message_type(0);
  static const int avID_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avID, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avID, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avID, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avID, useragent_),
  };
  avID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avID_descriptor_,
      avID::default_instance_,
      avID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avID));
  avimPacket_descriptor_ = file->message_type(1);
  static const int avimPacket_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avimPacket, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avimPacket, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avimPacket, all_ofline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avimPacket, application_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avimPacket, avmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avimPacket, avmessage_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avimPacket, avctl_),
  };
  avimPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avimPacket_descriptor_,
      avimPacket::default_instance_,
      avimPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avimPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avimPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avimPacket));
  avClientControl_descriptor_ = file->message_type(2);
  static const int avClientControl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avClientControl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avClientControl, digest_),
  };
  avClientControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avClientControl_descriptor_,
      avClientControl::default_instance_,
      avClientControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avClientControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avClientControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avClientControl));
  avClientControl_controltype_descriptor_ = avClientControl_descriptor_->enum_type(0);
  avPacketMessage_descriptor_ = file->message_type(3);
  static const int avPacketMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacketMessage, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacketMessage, msgblock_),
  };
  avPacketMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avPacketMessage_descriptor_,
      avPacketMessage::default_instance_,
      avPacketMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacketMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacketMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avPacketMessage));
  avPacketMessageReplay_descriptor_ = file->message_type(4);
  static const int avPacketMessageReplay_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacketMessageReplay, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacketMessageReplay, multistatus_),
  };
  avPacketMessageReplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avPacketMessageReplay_descriptor_,
      avPacketMessageReplay::default_instance_,
      avPacketMessageReplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacketMessageReplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacketMessageReplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avPacketMessageReplay));
  avPacketMessageReplay_MultiStatus_descriptor_ = avPacketMessageReplay_descriptor_->nested_type(0);
  static const int avPacketMessageReplay_MultiStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacketMessageReplay_MultiStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacketMessageReplay_MultiStatus, avid_),
  };
  avPacketMessageReplay_MultiStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avPacketMessageReplay_MultiStatus_descriptor_,
      avPacketMessageReplay_MultiStatus::default_instance_,
      avPacketMessageReplay_MultiStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacketMessageReplay_MultiStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacketMessageReplay_MultiStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avPacketMessageReplay_MultiStatus));
  avPacketMessageReplay_Status_descriptor_ = avPacketMessageReplay_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_avim_2dbase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avID_descriptor_, &avID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avimPacket_descriptor_, &avimPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avClientControl_descriptor_, &avClientControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avPacketMessage_descriptor_, &avPacketMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avPacketMessageReplay_descriptor_, &avPacketMessageReplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avPacketMessageReplay_MultiStatus_descriptor_, &avPacketMessageReplay_MultiStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_avim_2dbase_2eproto() {
  delete avID::default_instance_;
  delete avID_reflection_;
  delete avimPacket::default_instance_;
  delete avimPacket_reflection_;
  delete avimPacket::_default_application_;
  delete avClientControl::default_instance_;
  delete avClientControl_reflection_;
  delete avPacketMessage::default_instance_;
  delete avPacketMessage_reflection_;
  delete avPacketMessageReplay::default_instance_;
  delete avPacketMessageReplay_reflection_;
  delete avPacketMessageReplay_MultiStatus::default_instance_;
  delete avPacketMessageReplay_MultiStatus_reflection_;
}

void protobuf_AddDesc_avim_2dbase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017avim-base.proto\022\017avim.proto.base\"M\n\004av"
    "ID\022\020\n\010username\030\001 \002(\t\022\016\n\006domain\030\002 \002(\t\022\020\n\010"
    "resource\030\003 \001(\t\022\021\n\tuseragent\030\004 \001(\t\"\263\002\n\nav"
    "imPacket\022\"\n\003src\030\001 \002(\0132\025.avim.proto.base."
    "avID\022#\n\004dest\030\002 \003(\0132\025.avim.proto.base.avI"
    "D\022\031\n\nall_ofline\030\004 \002(\010:\005false\022\031\n\013applicat"
    "ion\030\003 \002(\t:\004avim\0223\n\tavmessage\030\005 \001(\0132 .avi"
    "m.proto.base.avPacketMessage\022\?\n\017avmessag"
    "e_reply\030\006 \001(\0132&.avim.proto.base.avPacket"
    "MessageReplay\0220\n\005avctl\030\200\002 \001(\0132 .avim.pro"
    "to.base.avClientControl\"\233\001\n\017avClientCont"
    "rol\022:\n\004type\030\001 \002(\0162,.avim.proto.base.avCl"
    "ientControl.controltype\022\016\n\006digest\0302 \001(\t\""
    "<\n\013controltype\022\t\n\005LOGIN\020\000\022\021\n\rAUTH_REQUIR"
    "ED\020\001\022\017\n\013DIGEST_AUTH\020\002\"3\n\017avPacketMessage"
    "\022\016\n\006length\030\001 \002(\004\022\020\n\010msgblock\030\002 \001(\014\"\200\003\n\025a"
    "vPacketMessageReplay\022=\n\006status\030\001 \002(\0162-.a"
    "vim.proto.base.avPacketMessageReplay.Sta"
    "tus\022G\n\013multistatus\030\002 \001(\01322.avim.proto.ba"
    "se.avPacketMessageReplay.MultiStatus\032q\n\013"
    "MultiStatus\022=\n\006status\030\001 \002(\0162-.avim.proto"
    ".base.avPacketMessageReplay.Status\022#\n\004av"
    "id\030\002 \002(\0132\025.avim.proto.base.avID\"l\n\006Statu"
    "s\022\r\n\tDELIVERED\020\000\022\013\n\007SUCCESS\020\000\022\n\n\006FAILED\020"
    "\001\022\024\n\020SUCCESS_OFFLINED\020\002\022 \n\034MULTIADDREDD_"
    "STATUS_ATTACHED\020\003\032\002\020\001", 1021);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "avim-base.proto", &protobuf_RegisterTypes);
  avID::default_instance_ = new avID();
  avimPacket::_default_application_ =
      new ::std::string("avim", 4);
  avimPacket::default_instance_ = new avimPacket();
  avClientControl::default_instance_ = new avClientControl();
  avPacketMessage::default_instance_ = new avPacketMessage();
  avPacketMessageReplay::default_instance_ = new avPacketMessageReplay();
  avPacketMessageReplay_MultiStatus::default_instance_ = new avPacketMessageReplay_MultiStatus();
  avID::default_instance_->InitAsDefaultInstance();
  avimPacket::default_instance_->InitAsDefaultInstance();
  avClientControl::default_instance_->InitAsDefaultInstance();
  avPacketMessage::default_instance_->InitAsDefaultInstance();
  avPacketMessageReplay::default_instance_->InitAsDefaultInstance();
  avPacketMessageReplay_MultiStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_avim_2dbase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_avim_2dbase_2eproto {
  StaticDescriptorInitializer_avim_2dbase_2eproto() {
    protobuf_AddDesc_avim_2dbase_2eproto();
  }
} static_descriptor_initializer_avim_2dbase_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int avID::kUsernameFieldNumber;
const int avID::kDomainFieldNumber;
const int avID::kResourceFieldNumber;
const int avID::kUseragentFieldNumber;
#endif  // !_MSC_VER

avID::avID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void avID::InitAsDefaultInstance() {
}

avID::avID(const avID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void avID::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  useragent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

avID::~avID() {
  SharedDtor();
}

void avID::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (useragent_ != &::google::protobuf::internal::kEmptyString) {
    delete useragent_;
  }
  if (this != default_instance_) {
  }
}

void avID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avID_descriptor_;
}

const avID& avID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avim_2dbase_2eproto();
  return *default_instance_;
}

avID* avID::default_instance_ = NULL;

avID* avID::New() const {
  return new avID;
}

void avID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    if (has_useragent()) {
      if (useragent_ != &::google::protobuf::internal::kEmptyString) {
        useragent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_domain;
        break;
      }

      // required string domain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resource;
        break;
      }

      // optional string resource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_useragent;
        break;
      }

      // optional string useragent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useragent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useragent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->useragent().data(), this->useragent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void avID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required string domain = 2;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->domain(), output);
  }

  // optional string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->resource(), output);
  }

  // optional string useragent = 4;
  if (has_useragent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useragent().data(), this->useragent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->useragent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* avID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string domain = 2;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  // optional string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resource(), target);
  }

  // optional string useragent = 4;
  if (has_useragent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useragent().data(), this->useragent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->useragent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int avID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string domain = 2;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string resource = 3;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional string useragent = 4;
    if (has_useragent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->useragent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avID::MergeFrom(const avID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_useragent()) {
      set_useragent(from.useragent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avID::CopyFrom(const avID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void avID::Swap(avID* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(domain_, other->domain_);
    std::swap(resource_, other->resource_);
    std::swap(useragent_, other->useragent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avID_descriptor_;
  metadata.reflection = avID_reflection_;
  return metadata;
}


// ===================================================================

::std::string* avimPacket::_default_application_ = NULL;
#ifndef _MSC_VER
const int avimPacket::kSrcFieldNumber;
const int avimPacket::kDestFieldNumber;
const int avimPacket::kAllOflineFieldNumber;
const int avimPacket::kApplicationFieldNumber;
const int avimPacket::kAvmessageFieldNumber;
const int avimPacket::kAvmessageReplyFieldNumber;
const int avimPacket::kAvctlFieldNumber;
#endif  // !_MSC_VER

avimPacket::avimPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void avimPacket::InitAsDefaultInstance() {
  src_ = const_cast< ::avim::proto::base::avID*>(&::avim::proto::base::avID::default_instance());
  avmessage_ = const_cast< ::avim::proto::base::avPacketMessage*>(&::avim::proto::base::avPacketMessage::default_instance());
  avmessage_reply_ = const_cast< ::avim::proto::base::avPacketMessageReplay*>(&::avim::proto::base::avPacketMessageReplay::default_instance());
  avctl_ = const_cast< ::avim::proto::base::avClientControl*>(&::avim::proto::base::avClientControl::default_instance());
}

avimPacket::avimPacket(const avimPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void avimPacket::SharedCtor() {
  _cached_size_ = 0;
  src_ = NULL;
  all_ofline_ = false;
  application_ = const_cast< ::std::string*>(_default_application_);
  avmessage_ = NULL;
  avmessage_reply_ = NULL;
  avctl_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

avimPacket::~avimPacket() {
  SharedDtor();
}

void avimPacket::SharedDtor() {
  if (application_ != _default_application_) {
    delete application_;
  }
  if (this != default_instance_) {
    delete src_;
    delete avmessage_;
    delete avmessage_reply_;
    delete avctl_;
  }
}

void avimPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avimPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avimPacket_descriptor_;
}

const avimPacket& avimPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avim_2dbase_2eproto();
  return *default_instance_;
}

avimPacket* avimPacket::default_instance_ = NULL;

avimPacket* avimPacket::New() const {
  return new avimPacket;
}

void avimPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != NULL) src_->::avim::proto::base::avID::Clear();
    }
    all_ofline_ = false;
    if (has_application()) {
      if (application_ != _default_application_) {
        application_->assign(*_default_application_);
      }
    }
    if (has_avmessage()) {
      if (avmessage_ != NULL) avmessage_->::avim::proto::base::avPacketMessage::Clear();
    }
    if (has_avmessage_reply()) {
      if (avmessage_reply_ != NULL) avmessage_reply_->::avim::proto::base::avPacketMessageReplay::Clear();
    }
    if (has_avctl()) {
      if (avctl_ != NULL) avctl_->::avim::proto::base::avClientControl::Clear();
    }
  }
  dest_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avimPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .avim.proto.base.avID src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dest;
        break;
      }

      // repeated .avim.proto.base.avID dest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dest;
        if (input->ExpectTag(26)) goto parse_application;
        break;
      }

      // required string application = 3 [default = "avim"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->application().data(), this->application().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_all_ofline;
        break;
      }

      // required bool all_ofline = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_ofline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_ofline_)));
          set_has_all_ofline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_avmessage;
        break;
      }

      // optional .avim.proto.base.avPacketMessage avmessage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avmessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_avmessage_reply;
        break;
      }

      // optional .avim.proto.base.avPacketMessageReplay avmessage_reply = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avmessage_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avmessage_reply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2050)) goto parse_avctl;
        break;
      }

      // optional .avim.proto.base.avClientControl avctl = 256;
      case 256: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avctl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avctl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void avimPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .avim.proto.base.avID src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->src(), output);
  }

  // repeated .avim.proto.base.avID dest = 2;
  for (int i = 0; i < this->dest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dest(i), output);
  }

  // required string application = 3 [default = "avim"];
  if (has_application()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application().data(), this->application().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->application(), output);
  }

  // required bool all_ofline = 4 [default = false];
  if (has_all_ofline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->all_ofline(), output);
  }

  // optional .avim.proto.base.avPacketMessage avmessage = 5;
  if (has_avmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->avmessage(), output);
  }

  // optional .avim.proto.base.avPacketMessageReplay avmessage_reply = 6;
  if (has_avmessage_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->avmessage_reply(), output);
  }

  // optional .avim.proto.base.avClientControl avctl = 256;
  if (has_avctl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      256, this->avctl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* avimPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .avim.proto.base.avID src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->src(), target);
  }

  // repeated .avim.proto.base.avID dest = 2;
  for (int i = 0; i < this->dest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dest(i), target);
  }

  // required string application = 3 [default = "avim"];
  if (has_application()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application().data(), this->application().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->application(), target);
  }

  // required bool all_ofline = 4 [default = false];
  if (has_all_ofline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->all_ofline(), target);
  }

  // optional .avim.proto.base.avPacketMessage avmessage = 5;
  if (has_avmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->avmessage(), target);
  }

  // optional .avim.proto.base.avPacketMessageReplay avmessage_reply = 6;
  if (has_avmessage_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->avmessage_reply(), target);
  }

  // optional .avim.proto.base.avClientControl avctl = 256;
  if (has_avctl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        256, this->avctl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int avimPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .avim.proto.base.avID src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src());
    }

    // required bool all_ofline = 4 [default = false];
    if (has_all_ofline()) {
      total_size += 1 + 1;
    }

    // required string application = 3 [default = "avim"];
    if (has_application()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application());
    }

    // optional .avim.proto.base.avPacketMessage avmessage = 5;
    if (has_avmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avmessage());
    }

    // optional .avim.proto.base.avPacketMessageReplay avmessage_reply = 6;
    if (has_avmessage_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avmessage_reply());
    }

    // optional .avim.proto.base.avClientControl avctl = 256;
    if (has_avctl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avctl());
    }

  }
  // repeated .avim.proto.base.avID dest = 2;
  total_size += 1 * this->dest_size();
  for (int i = 0; i < this->dest_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dest(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avimPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avimPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avimPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avimPacket::MergeFrom(const avimPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  dest_.MergeFrom(from.dest_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      mutable_src()->::avim::proto::base::avID::MergeFrom(from.src());
    }
    if (from.has_all_ofline()) {
      set_all_ofline(from.all_ofline());
    }
    if (from.has_application()) {
      set_application(from.application());
    }
    if (from.has_avmessage()) {
      mutable_avmessage()->::avim::proto::base::avPacketMessage::MergeFrom(from.avmessage());
    }
    if (from.has_avmessage_reply()) {
      mutable_avmessage_reply()->::avim::proto::base::avPacketMessageReplay::MergeFrom(from.avmessage_reply());
    }
    if (from.has_avctl()) {
      mutable_avctl()->::avim::proto::base::avClientControl::MergeFrom(from.avctl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avimPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avimPacket::CopyFrom(const avimPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avimPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has_src()) {
    if (!this->src().IsInitialized()) return false;
  }
  for (int i = 0; i < dest_size(); i++) {
    if (!this->dest(i).IsInitialized()) return false;
  }
  if (has_avmessage()) {
    if (!this->avmessage().IsInitialized()) return false;
  }
  if (has_avmessage_reply()) {
    if (!this->avmessage_reply().IsInitialized()) return false;
  }
  if (has_avctl()) {
    if (!this->avctl().IsInitialized()) return false;
  }
  return true;
}

void avimPacket::Swap(avimPacket* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    dest_.Swap(&other->dest_);
    std::swap(all_ofline_, other->all_ofline_);
    std::swap(application_, other->application_);
    std::swap(avmessage_, other->avmessage_);
    std::swap(avmessage_reply_, other->avmessage_reply_);
    std::swap(avctl_, other->avctl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avimPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avimPacket_descriptor_;
  metadata.reflection = avimPacket_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* avClientControl_controltype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avClientControl_controltype_descriptor_;
}
bool avClientControl_controltype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const avClientControl_controltype avClientControl::LOGIN;
const avClientControl_controltype avClientControl::AUTH_REQUIRED;
const avClientControl_controltype avClientControl::DIGEST_AUTH;
const avClientControl_controltype avClientControl::controltype_MIN;
const avClientControl_controltype avClientControl::controltype_MAX;
const int avClientControl::controltype_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int avClientControl::kTypeFieldNumber;
const int avClientControl::kDigestFieldNumber;
#endif  // !_MSC_VER

avClientControl::avClientControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void avClientControl::InitAsDefaultInstance() {
}

avClientControl::avClientControl(const avClientControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void avClientControl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  digest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

avClientControl::~avClientControl() {
  SharedDtor();
}

void avClientControl::SharedDtor() {
  if (digest_ != &::google::protobuf::internal::kEmptyString) {
    delete digest_;
  }
  if (this != default_instance_) {
  }
}

void avClientControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avClientControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avClientControl_descriptor_;
}

const avClientControl& avClientControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avim_2dbase_2eproto();
  return *default_instance_;
}

avClientControl* avClientControl::default_instance_ = NULL;

avClientControl* avClientControl::New() const {
  return new avClientControl;
}

void avClientControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_digest()) {
      if (digest_ != &::google::protobuf::internal::kEmptyString) {
        digest_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avClientControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .avim.proto.base.avClientControl.controltype type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::avim::proto::base::avClientControl_controltype_IsValid(value)) {
            set_type(static_cast< ::avim::proto::base::avClientControl_controltype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_digest;
        break;
      }

      // optional string digest = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_digest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_digest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->digest().data(), this->digest().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void avClientControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .avim.proto.base.avClientControl.controltype type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string digest = 50;
  if (has_digest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->digest().data(), this->digest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->digest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* avClientControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .avim.proto.base.avClientControl.controltype type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string digest = 50;
  if (has_digest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->digest().data(), this->digest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->digest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int avClientControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .avim.proto.base.avClientControl.controltype type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string digest = 50;
    if (has_digest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->digest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avClientControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avClientControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avClientControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avClientControl::MergeFrom(const avClientControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_digest()) {
      set_digest(from.digest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avClientControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avClientControl::CopyFrom(const avClientControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avClientControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void avClientControl::Swap(avClientControl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(digest_, other->digest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avClientControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avClientControl_descriptor_;
  metadata.reflection = avClientControl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int avPacketMessage::kLengthFieldNumber;
const int avPacketMessage::kMsgblockFieldNumber;
#endif  // !_MSC_VER

avPacketMessage::avPacketMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void avPacketMessage::InitAsDefaultInstance() {
}

avPacketMessage::avPacketMessage(const avPacketMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void avPacketMessage::SharedCtor() {
  _cached_size_ = 0;
  length_ = GOOGLE_ULONGLONG(0);
  msgblock_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

avPacketMessage::~avPacketMessage() {
  SharedDtor();
}

void avPacketMessage::SharedDtor() {
  if (msgblock_ != &::google::protobuf::internal::kEmptyString) {
    delete msgblock_;
  }
  if (this != default_instance_) {
  }
}

void avPacketMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avPacketMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avPacketMessage_descriptor_;
}

const avPacketMessage& avPacketMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avim_2dbase_2eproto();
  return *default_instance_;
}

avPacketMessage* avPacketMessage::default_instance_ = NULL;

avPacketMessage* avPacketMessage::New() const {
  return new avPacketMessage;
}

void avPacketMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    length_ = GOOGLE_ULONGLONG(0);
    if (has_msgblock()) {
      if (msgblock_ != &::google::protobuf::internal::kEmptyString) {
        msgblock_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avPacketMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgblock;
        break;
      }

      // optional bytes msgblock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgblock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgblock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void avPacketMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->length(), output);
  }

  // optional bytes msgblock = 2;
  if (has_msgblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msgblock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* avPacketMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->length(), target);
  }

  // optional bytes msgblock = 2;
  if (has_msgblock()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msgblock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int avPacketMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 length = 1;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->length());
    }

    // optional bytes msgblock = 2;
    if (has_msgblock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msgblock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avPacketMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avPacketMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avPacketMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avPacketMessage::MergeFrom(const avPacketMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_msgblock()) {
      set_msgblock(from.msgblock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avPacketMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avPacketMessage::CopyFrom(const avPacketMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avPacketMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void avPacketMessage::Swap(avPacketMessage* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(msgblock_, other->msgblock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avPacketMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avPacketMessage_descriptor_;
  metadata.reflection = avPacketMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* avPacketMessageReplay_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avPacketMessageReplay_Status_descriptor_;
}
bool avPacketMessageReplay_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const avPacketMessageReplay_Status avPacketMessageReplay::DELIVERED;
const avPacketMessageReplay_Status avPacketMessageReplay::SUCCESS;
const avPacketMessageReplay_Status avPacketMessageReplay::FAILED;
const avPacketMessageReplay_Status avPacketMessageReplay::SUCCESS_OFFLINED;
const avPacketMessageReplay_Status avPacketMessageReplay::MULTIADDREDD_STATUS_ATTACHED;
const avPacketMessageReplay_Status avPacketMessageReplay::Status_MIN;
const avPacketMessageReplay_Status avPacketMessageReplay::Status_MAX;
const int avPacketMessageReplay::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int avPacketMessageReplay_MultiStatus::kStatusFieldNumber;
const int avPacketMessageReplay_MultiStatus::kAvidFieldNumber;
#endif  // !_MSC_VER

avPacketMessageReplay_MultiStatus::avPacketMessageReplay_MultiStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void avPacketMessageReplay_MultiStatus::InitAsDefaultInstance() {
  avid_ = const_cast< ::avim::proto::base::avID*>(&::avim::proto::base::avID::default_instance());
}

avPacketMessageReplay_MultiStatus::avPacketMessageReplay_MultiStatus(const avPacketMessageReplay_MultiStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void avPacketMessageReplay_MultiStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  avid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

avPacketMessageReplay_MultiStatus::~avPacketMessageReplay_MultiStatus() {
  SharedDtor();
}

void avPacketMessageReplay_MultiStatus::SharedDtor() {
  if (this != default_instance_) {
    delete avid_;
  }
}

void avPacketMessageReplay_MultiStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avPacketMessageReplay_MultiStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avPacketMessageReplay_MultiStatus_descriptor_;
}

const avPacketMessageReplay_MultiStatus& avPacketMessageReplay_MultiStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avim_2dbase_2eproto();
  return *default_instance_;
}

avPacketMessageReplay_MultiStatus* avPacketMessageReplay_MultiStatus::default_instance_ = NULL;

avPacketMessageReplay_MultiStatus* avPacketMessageReplay_MultiStatus::New() const {
  return new avPacketMessageReplay_MultiStatus;
}

void avPacketMessageReplay_MultiStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_avid()) {
      if (avid_ != NULL) avid_->::avim::proto::base::avID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avPacketMessageReplay_MultiStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .avim.proto.base.avPacketMessageReplay.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::avim::proto::base::avPacketMessageReplay_Status_IsValid(value)) {
            set_status(static_cast< ::avim::proto::base::avPacketMessageReplay_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_avid;
        break;
      }

      // required .avim.proto.base.avID avid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void avPacketMessageReplay_MultiStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .avim.proto.base.avPacketMessageReplay.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // required .avim.proto.base.avID avid = 2;
  if (has_avid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->avid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* avPacketMessageReplay_MultiStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .avim.proto.base.avPacketMessageReplay.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // required .avim.proto.base.avID avid = 2;
  if (has_avid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->avid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int avPacketMessageReplay_MultiStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .avim.proto.base.avPacketMessageReplay.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required .avim.proto.base.avID avid = 2;
    if (has_avid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avPacketMessageReplay_MultiStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avPacketMessageReplay_MultiStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avPacketMessageReplay_MultiStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avPacketMessageReplay_MultiStatus::MergeFrom(const avPacketMessageReplay_MultiStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_avid()) {
      mutable_avid()->::avim::proto::base::avID::MergeFrom(from.avid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avPacketMessageReplay_MultiStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avPacketMessageReplay_MultiStatus::CopyFrom(const avPacketMessageReplay_MultiStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avPacketMessageReplay_MultiStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_avid()) {
    if (!this->avid().IsInitialized()) return false;
  }
  return true;
}

void avPacketMessageReplay_MultiStatus::Swap(avPacketMessageReplay_MultiStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(avid_, other->avid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avPacketMessageReplay_MultiStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avPacketMessageReplay_MultiStatus_descriptor_;
  metadata.reflection = avPacketMessageReplay_MultiStatus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int avPacketMessageReplay::kStatusFieldNumber;
const int avPacketMessageReplay::kMultistatusFieldNumber;
#endif  // !_MSC_VER

avPacketMessageReplay::avPacketMessageReplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void avPacketMessageReplay::InitAsDefaultInstance() {
  multistatus_ = const_cast< ::avim::proto::base::avPacketMessageReplay_MultiStatus*>(&::avim::proto::base::avPacketMessageReplay_MultiStatus::default_instance());
}

avPacketMessageReplay::avPacketMessageReplay(const avPacketMessageReplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void avPacketMessageReplay::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  multistatus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

avPacketMessageReplay::~avPacketMessageReplay() {
  SharedDtor();
}

void avPacketMessageReplay::SharedDtor() {
  if (this != default_instance_) {
    delete multistatus_;
  }
}

void avPacketMessageReplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avPacketMessageReplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avPacketMessageReplay_descriptor_;
}

const avPacketMessageReplay& avPacketMessageReplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avim_2dbase_2eproto();
  return *default_instance_;
}

avPacketMessageReplay* avPacketMessageReplay::default_instance_ = NULL;

avPacketMessageReplay* avPacketMessageReplay::New() const {
  return new avPacketMessageReplay;
}

void avPacketMessageReplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_multistatus()) {
      if (multistatus_ != NULL) multistatus_->::avim::proto::base::avPacketMessageReplay_MultiStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avPacketMessageReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .avim.proto.base.avPacketMessageReplay.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::avim::proto::base::avPacketMessageReplay_Status_IsValid(value)) {
            set_status(static_cast< ::avim::proto::base::avPacketMessageReplay_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_multistatus;
        break;
      }

      // optional .avim.proto.base.avPacketMessageReplay.MultiStatus multistatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_multistatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multistatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void avPacketMessageReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .avim.proto.base.avPacketMessageReplay.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional .avim.proto.base.avPacketMessageReplay.MultiStatus multistatus = 2;
  if (has_multistatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->multistatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* avPacketMessageReplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .avim.proto.base.avPacketMessageReplay.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional .avim.proto.base.avPacketMessageReplay.MultiStatus multistatus = 2;
  if (has_multistatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->multistatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int avPacketMessageReplay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .avim.proto.base.avPacketMessageReplay.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .avim.proto.base.avPacketMessageReplay.MultiStatus multistatus = 2;
    if (has_multistatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multistatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avPacketMessageReplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avPacketMessageReplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avPacketMessageReplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avPacketMessageReplay::MergeFrom(const avPacketMessageReplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_multistatus()) {
      mutable_multistatus()->::avim::proto::base::avPacketMessageReplay_MultiStatus::MergeFrom(from.multistatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avPacketMessageReplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avPacketMessageReplay::CopyFrom(const avPacketMessageReplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avPacketMessageReplay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_multistatus()) {
    if (!this->multistatus().IsInitialized()) return false;
  }
  return true;
}

void avPacketMessageReplay::Swap(avPacketMessageReplay* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(multistatus_, other->multistatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avPacketMessageReplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avPacketMessageReplay_descriptor_;
  metadata.reflection = avPacketMessageReplay_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace proto
}  // namespace avim

// @@protoc_insertion_point(global_scope)
