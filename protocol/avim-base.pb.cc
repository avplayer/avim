// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avim-base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "avim-base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace base {

namespace {

const ::google::protobuf::Descriptor* avAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* avPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* aGMP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  aGMP_reflection_ = NULL;
const ::google::protobuf::Descriptor* avTCPPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avTCPPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_avim_2dbase_2eproto() {
  protobuf_AddDesc_avim_2dbase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "avim-base.proto");
  GOOGLE_CHECK(file != NULL);
  avAddress_descriptor_ = file->message_type(0);
  static const int avAddress_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avAddress, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avAddress, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avAddress, resource_),
  };
  avAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avAddress_descriptor_,
      avAddress::default_instance_,
      avAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avAddress));
  avPacket_descriptor_ = file->message_type(1);
  static const int avPacket_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, publickey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, upperlayerpotocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, encrype_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, payload_),
  };
  avPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avPacket_descriptor_,
      avPacket::default_instance_,
      avPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avPacket));
  aGMP_descriptor_ = file->message_type(2);
  static const int aGMP_offsets_[1] = {
  };
  aGMP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      aGMP_descriptor_,
      aGMP::default_instance_,
      aGMP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aGMP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aGMP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(aGMP));
  avTCPPacket_descriptor_ = file->message_type(3);
  static const int avTCPPacket_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avTCPPacket, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avTCPPacket, avpacket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avTCPPacket, endpoint_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avTCPPacket, endpoint_cert_),
  };
  avTCPPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avTCPPacket_descriptor_,
      avTCPPacket::default_instance_,
      avTCPPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avTCPPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avTCPPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avTCPPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_avim_2dbase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avAddress_descriptor_, &avAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avPacket_descriptor_, &avPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    aGMP_descriptor_, &aGMP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avTCPPacket_descriptor_, &avTCPPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_avim_2dbase_2eproto() {
  delete avAddress::default_instance_;
  delete avAddress_reflection_;
  delete avPacket::default_instance_;
  delete avPacket_reflection_;
  delete avPacket::_default_upperlayerpotocol_;
  delete aGMP::default_instance_;
  delete aGMP_reflection_;
  delete avTCPPacket::default_instance_;
  delete avTCPPacket_reflection_;
}

void protobuf_AddDesc_avim_2dbase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017avim-base.proto\022\nproto.base\"\?\n\tavAddre"
    "ss\022\020\n\010username\030\001 \002(\t\022\016\n\006domain\030\002 \002(\t\022\020\n\010"
    "resource\030\003 \001(\t\"\263\001\n\010avPacket\022\"\n\003src\030\001 \002(\013"
    "2\025.proto.base.avAddress\022#\n\004dest\030\002 \002(\0132\025."
    "proto.base.avAddress\022\021\n\tpublickey\030\003 \001(\014\022"
    "\037\n\021upperlayerpotocol\030\006 \002(\t:\004avim\022\031\n\016encr"
    "ype_method\030\007 \001(\r:\0010\022\017\n\007payload\030\010 \001(\014\"\006\n\004"
    "aGMP\"\213\001\n\013avTCPPacket\022\014\n\004type\030\001 \002(\r\022&\n\010av"
    "packet\030\002 \001(\0132\024.proto.base.avPacket\022/\n\020en"
    "dpoint_address\030\003 \001(\0132\025.proto.base.avAddr"
    "ess\022\025\n\rendpoint_cert\030\004 \001(\014", 426);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "avim-base.proto", &protobuf_RegisterTypes);
  avAddress::default_instance_ = new avAddress();
  avPacket::_default_upperlayerpotocol_ =
      new ::std::string("avim", 4);
  avPacket::default_instance_ = new avPacket();
  aGMP::default_instance_ = new aGMP();
  avTCPPacket::default_instance_ = new avTCPPacket();
  avAddress::default_instance_->InitAsDefaultInstance();
  avPacket::default_instance_->InitAsDefaultInstance();
  aGMP::default_instance_->InitAsDefaultInstance();
  avTCPPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_avim_2dbase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_avim_2dbase_2eproto {
  StaticDescriptorInitializer_avim_2dbase_2eproto() {
    protobuf_AddDesc_avim_2dbase_2eproto();
  }
} static_descriptor_initializer_avim_2dbase_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int avAddress::kUsernameFieldNumber;
const int avAddress::kDomainFieldNumber;
const int avAddress::kResourceFieldNumber;
#endif  // !_MSC_VER

avAddress::avAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.base.avAddress)
}

void avAddress::InitAsDefaultInstance() {
}

avAddress::avAddress(const avAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.base.avAddress)
}

void avAddress::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

avAddress::~avAddress() {
  // @@protoc_insertion_point(destructor:proto.base.avAddress)
  SharedDtor();
}

void avAddress::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (resource_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resource_;
  }
  if (this != default_instance_) {
  }
}

void avAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avAddress_descriptor_;
}

const avAddress& avAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avim_2dbase_2eproto();
  return *default_instance_;
}

avAddress* avAddress::default_instance_ = NULL;

avAddress* avAddress::New() const {
  return new avAddress;
}

void avAddress::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resource_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.base.avAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_domain;
        break;
      }

      // required string domain = 2;
      case 2: {
        if (tag == 18) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resource;
        break;
      }

      // optional string resource = 3;
      case 3: {
        if (tag == 26) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resource");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.base.avAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.base.avAddress)
  return false;
#undef DO_
}

void avAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.base.avAddress)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required string domain = 2;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // optional string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.base.avAddress)
}

::google::protobuf::uint8* avAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.base.avAddress)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string domain = 2;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  // optional string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.base.avAddress)
  return target;
}

int avAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string domain = 2;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string resource = 3;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avAddress::MergeFrom(const avAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avAddress::CopyFrom(const avAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void avAddress::Swap(avAddress* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(domain_, other->domain_);
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avAddress_descriptor_;
  metadata.reflection = avAddress_reflection_;
  return metadata;
}


// ===================================================================

::std::string* avPacket::_default_upperlayerpotocol_ = NULL;
#ifndef _MSC_VER
const int avPacket::kSrcFieldNumber;
const int avPacket::kDestFieldNumber;
const int avPacket::kPublickeyFieldNumber;
const int avPacket::kUpperlayerpotocolFieldNumber;
const int avPacket::kEncrypeMethodFieldNumber;
const int avPacket::kPayloadFieldNumber;
#endif  // !_MSC_VER

avPacket::avPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.base.avPacket)
}

void avPacket::InitAsDefaultInstance() {
  src_ = const_cast< ::proto::base::avAddress*>(&::proto::base::avAddress::default_instance());
  dest_ = const_cast< ::proto::base::avAddress*>(&::proto::base::avAddress::default_instance());
}

avPacket::avPacket(const avPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.base.avPacket)
}

void avPacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_ = NULL;
  dest_ = NULL;
  publickey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upperlayerpotocol_ = const_cast< ::std::string*>(_default_upperlayerpotocol_);
  encrype_method_ = 0u;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

avPacket::~avPacket() {
  // @@protoc_insertion_point(destructor:proto.base.avPacket)
  SharedDtor();
}

void avPacket::SharedDtor() {
  if (publickey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete publickey_;
  }
  if (upperlayerpotocol_ != _default_upperlayerpotocol_) {
    delete upperlayerpotocol_;
  }
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (this != default_instance_) {
    delete src_;
    delete dest_;
  }
}

void avPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avPacket_descriptor_;
}

const avPacket& avPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avim_2dbase_2eproto();
  return *default_instance_;
}

avPacket* avPacket::default_instance_ = NULL;

avPacket* avPacket::New() const {
  return new avPacket;
}

void avPacket::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_src()) {
      if (src_ != NULL) src_->::proto::base::avAddress::Clear();
    }
    if (has_dest()) {
      if (dest_ != NULL) dest_->::proto::base::avAddress::Clear();
    }
    if (has_publickey()) {
      if (publickey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        publickey_->clear();
      }
    }
    if (has_upperlayerpotocol()) {
      if (upperlayerpotocol_ != _default_upperlayerpotocol_) {
        upperlayerpotocol_->assign(*_default_upperlayerpotocol_);
      }
    }
    encrype_method_ = 0u;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.base.avPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.base.avAddress src = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dest;
        break;
      }

      // required .proto.base.avAddress dest = 2;
      case 2: {
        if (tag == 18) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_publickey;
        break;
      }

      // optional bytes publickey = 3;
      case 3: {
        if (tag == 26) {
         parse_publickey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_publickey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_upperlayerpotocol;
        break;
      }

      // required string upperlayerpotocol = 6 [default = "avim"];
      case 6: {
        if (tag == 50) {
         parse_upperlayerpotocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upperlayerpotocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->upperlayerpotocol().data(), this->upperlayerpotocol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "upperlayerpotocol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_encrype_method;
        break;
      }

      // optional uint32 encrype_method = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_encrype_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &encrype_method_)));
          set_has_encrype_method();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_payload;
        break;
      }

      // optional bytes payload = 8;
      case 8: {
        if (tag == 66) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.base.avPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.base.avPacket)
  return false;
#undef DO_
}

void avPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.base.avPacket)
  // required .proto.base.avAddress src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->src(), output);
  }

  // required .proto.base.avAddress dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dest(), output);
  }

  // optional bytes publickey = 3;
  if (has_publickey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->publickey(), output);
  }

  // required string upperlayerpotocol = 6 [default = "avim"];
  if (has_upperlayerpotocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upperlayerpotocol().data(), this->upperlayerpotocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "upperlayerpotocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->upperlayerpotocol(), output);
  }

  // optional uint32 encrype_method = 7 [default = 0];
  if (has_encrype_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->encrype_method(), output);
  }

  // optional bytes payload = 8;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->payload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.base.avPacket)
}

::google::protobuf::uint8* avPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.base.avPacket)
  // required .proto.base.avAddress src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->src(), target);
  }

  // required .proto.base.avAddress dest = 2;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dest(), target);
  }

  // optional bytes publickey = 3;
  if (has_publickey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->publickey(), target);
  }

  // required string upperlayerpotocol = 6 [default = "avim"];
  if (has_upperlayerpotocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upperlayerpotocol().data(), this->upperlayerpotocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "upperlayerpotocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->upperlayerpotocol(), target);
  }

  // optional uint32 encrype_method = 7 [default = 0];
  if (has_encrype_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->encrype_method(), target);
  }

  // optional bytes payload = 8;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->payload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.base.avPacket)
  return target;
}

int avPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.base.avAddress src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src());
    }

    // required .proto.base.avAddress dest = 2;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest());
    }

    // optional bytes publickey = 3;
    if (has_publickey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->publickey());
    }

    // required string upperlayerpotocol = 6 [default = "avim"];
    if (has_upperlayerpotocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upperlayerpotocol());
    }

    // optional uint32 encrype_method = 7 [default = 0];
    if (has_encrype_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->encrype_method());
    }

    // optional bytes payload = 8;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avPacket::MergeFrom(const avPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      mutable_src()->::proto::base::avAddress::MergeFrom(from.src());
    }
    if (from.has_dest()) {
      mutable_dest()->::proto::base::avAddress::MergeFrom(from.dest());
    }
    if (from.has_publickey()) {
      set_publickey(from.publickey());
    }
    if (from.has_upperlayerpotocol()) {
      set_upperlayerpotocol(from.upperlayerpotocol());
    }
    if (from.has_encrype_method()) {
      set_encrype_method(from.encrype_method());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avPacket::CopyFrom(const avPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_src()) {
    if (!this->src().IsInitialized()) return false;
  }
  if (has_dest()) {
    if (!this->dest().IsInitialized()) return false;
  }
  return true;
}

void avPacket::Swap(avPacket* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dest_, other->dest_);
    std::swap(publickey_, other->publickey_);
    std::swap(upperlayerpotocol_, other->upperlayerpotocol_);
    std::swap(encrype_method_, other->encrype_method_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avPacket_descriptor_;
  metadata.reflection = avPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

aGMP::aGMP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.base.aGMP)
}

void aGMP::InitAsDefaultInstance() {
}

aGMP::aGMP(const aGMP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.base.aGMP)
}

void aGMP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

aGMP::~aGMP() {
  // @@protoc_insertion_point(destructor:proto.base.aGMP)
  SharedDtor();
}

void aGMP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void aGMP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* aGMP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return aGMP_descriptor_;
}

const aGMP& aGMP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avim_2dbase_2eproto();
  return *default_instance_;
}

aGMP* aGMP::default_instance_ = NULL;

aGMP* aGMP::New() const {
  return new aGMP;
}

void aGMP::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool aGMP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.base.aGMP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.base.aGMP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.base.aGMP)
  return false;
#undef DO_
}

void aGMP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.base.aGMP)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.base.aGMP)
}

::google::protobuf::uint8* aGMP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.base.aGMP)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.base.aGMP)
  return target;
}

int aGMP::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void aGMP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const aGMP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const aGMP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void aGMP::MergeFrom(const aGMP& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void aGMP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void aGMP::CopyFrom(const aGMP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool aGMP::IsInitialized() const {

  return true;
}

void aGMP::Swap(aGMP* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata aGMP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = aGMP_descriptor_;
  metadata.reflection = aGMP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int avTCPPacket::kTypeFieldNumber;
const int avTCPPacket::kAvpacketFieldNumber;
const int avTCPPacket::kEndpointAddressFieldNumber;
const int avTCPPacket::kEndpointCertFieldNumber;
#endif  // !_MSC_VER

avTCPPacket::avTCPPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.base.avTCPPacket)
}

void avTCPPacket::InitAsDefaultInstance() {
  avpacket_ = const_cast< ::proto::base::avPacket*>(&::proto::base::avPacket::default_instance());
  endpoint_address_ = const_cast< ::proto::base::avAddress*>(&::proto::base::avAddress::default_instance());
}

avTCPPacket::avTCPPacket(const avTCPPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.base.avTCPPacket)
}

void avTCPPacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  avpacket_ = NULL;
  endpoint_address_ = NULL;
  endpoint_cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

avTCPPacket::~avTCPPacket() {
  // @@protoc_insertion_point(destructor:proto.base.avTCPPacket)
  SharedDtor();
}

void avTCPPacket::SharedDtor() {
  if (endpoint_cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endpoint_cert_;
  }
  if (this != default_instance_) {
    delete avpacket_;
    delete endpoint_address_;
  }
}

void avTCPPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avTCPPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avTCPPacket_descriptor_;
}

const avTCPPacket& avTCPPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_avim_2dbase_2eproto();
  return *default_instance_;
}

avTCPPacket* avTCPPacket::default_instance_ = NULL;

avTCPPacket* avTCPPacket::New() const {
  return new avTCPPacket;
}

void avTCPPacket::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 0u;
    if (has_avpacket()) {
      if (avpacket_ != NULL) avpacket_->::proto::base::avPacket::Clear();
    }
    if (has_endpoint_address()) {
      if (endpoint_address_ != NULL) endpoint_address_->::proto::base::avAddress::Clear();
    }
    if (has_endpoint_cert()) {
      if (endpoint_cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endpoint_cert_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avTCPPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.base.avTCPPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_avpacket;
        break;
      }

      // optional .proto.base.avPacket avpacket = 2;
      case 2: {
        if (tag == 18) {
         parse_avpacket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avpacket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_endpoint_address;
        break;
      }

      // optional .proto.base.avAddress endpoint_address = 3;
      case 3: {
        if (tag == 26) {
         parse_endpoint_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpoint_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_endpoint_cert;
        break;
      }

      // optional bytes endpoint_cert = 4;
      case 4: {
        if (tag == 34) {
         parse_endpoint_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_endpoint_cert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.base.avTCPPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.base.avTCPPacket)
  return false;
#undef DO_
}

void avTCPPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.base.avTCPPacket)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional .proto.base.avPacket avpacket = 2;
  if (has_avpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->avpacket(), output);
  }

  // optional .proto.base.avAddress endpoint_address = 3;
  if (has_endpoint_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->endpoint_address(), output);
  }

  // optional bytes endpoint_cert = 4;
  if (has_endpoint_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->endpoint_cert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.base.avTCPPacket)
}

::google::protobuf::uint8* avTCPPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.base.avTCPPacket)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional .proto.base.avPacket avpacket = 2;
  if (has_avpacket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->avpacket(), target);
  }

  // optional .proto.base.avAddress endpoint_address = 3;
  if (has_endpoint_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->endpoint_address(), target);
  }

  // optional bytes endpoint_cert = 4;
  if (has_endpoint_cert()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->endpoint_cert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.base.avTCPPacket)
  return target;
}

int avTCPPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .proto.base.avPacket avpacket = 2;
    if (has_avpacket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avpacket());
    }

    // optional .proto.base.avAddress endpoint_address = 3;
    if (has_endpoint_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpoint_address());
    }

    // optional bytes endpoint_cert = 4;
    if (has_endpoint_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->endpoint_cert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avTCPPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avTCPPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avTCPPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avTCPPacket::MergeFrom(const avTCPPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_avpacket()) {
      mutable_avpacket()->::proto::base::avPacket::MergeFrom(from.avpacket());
    }
    if (from.has_endpoint_address()) {
      mutable_endpoint_address()->::proto::base::avAddress::MergeFrom(from.endpoint_address());
    }
    if (from.has_endpoint_cert()) {
      set_endpoint_cert(from.endpoint_cert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avTCPPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avTCPPacket::CopyFrom(const avTCPPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avTCPPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_avpacket()) {
    if (!this->avpacket().IsInitialized()) return false;
  }
  if (has_endpoint_address()) {
    if (!this->endpoint_address().IsInitialized()) return false;
  }
  return true;
}

void avTCPPacket::Swap(avTCPPacket* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(avpacket_, other->avpacket_);
    std::swap(endpoint_address_, other->endpoint_address_);
    std::swap(endpoint_cert_, other->endpoint_cert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avTCPPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avTCPPacket_descriptor_;
  metadata.reflection = avTCPPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace proto

// @@protoc_insertion_point(global_scope)
